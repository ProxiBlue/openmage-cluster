jpsType: install
jpsVersion: '1.4'
id: openmage-cluster
homepage: https://github.com/proxiblue/openmage-cluster/tree/main
description:
  text: Auto-scalable and highly-available OpenMage eCommerce cluster with out-of-box
    auto-scaling, even load and traffic distribution, master-master data replication,
    page caching and user session storage on certified Jelastic dockerized stack templates.
  short: Auto-scalable and highly-available OpenMage cluster with load balancing, data
    replication, content caching and user session storage.
categories:
- apps/clusters
- apps/e-commerce
logo: https://raw.githubusercontent.com/ProxiBlue/openmage-cluster/main/images/57708.png
name: Auto-Scalable OpenMage Cluster

globals:
  PATH: https://raw.githubusercontent.com/ProxiBlue/openmage-cluster/main/
  MAGE_ROOT: "/var/www/webroot/ROOT"
  DB_USER: jelastic-${fn.random}
  DB_PASS: "${fn.password(20)}"
  DB_NAME: openmage
  RD_PASS: "${fn.password(10)}"
  ADMIN_PASSWD: "${fn.password(10)}"

success: 'Below you will find your admin panel URL, username and password.</br></br>
  <table style=''font-size:13px; border: none;''><tr><td>Admin panel URL:</td><td
  style=''padding-left: 10px;''><a href=''${env.protocol}://${env.domain}/admin/''
  target=''_blank''>${env.protocol}://${env.domain}/admin/</a></td></tr>  <tr><td>Admin
  name:</td><td style=''padding-left: 10px;''>admin</td></tr><tr><td>Password:</td><td
  style=''padding-left: 10px;''>${globals.ADMIN_PASSWD}</td></tr></table></br>To add
  a custom domain name for your Magento Cluster installation, follow the steps described
  in our <a href=''http://docs.jelastic.com/custom-domains'' target=''_blank''>documentation</a>'

ssl: false
skipNodeEmails: true
nodes:
- nodeType: nginxphp-dockerized
  tag: 1.16.1-php-7.2.29
  count: 2
  cloudlets: 16
  nodeGroup: cp
  volumeMounts:
    "/var/www/webroot/ROOT":
      readOnly: false
      sourcePath: "/data"
      sourceNodeGroup: storage
  displayName: AppServer
  env:
    PHPFPM_MAX_CHILDREN: 3

- nodeType: mariadb-dockerized
  tag: 10.3.22
  count: 2
  cloudlets: 8
  nodeGroup: sqldb
  displayName: Database
  env:
    ON_ENV_INSTALL: ""
- nodeType: storage
  cloudlets: 8
  nodeGroup: storage
  displayName: Storage
- nodeType: varnish-dockerized
  tag: 5.2.1
  cloudlets: 8
  nodeGroup: bl
  displayName: Balancer
- nodeType: redis
  count: 2
  cloudlets: 8
  nodeGroup: nosqldb

onAfterScaleOut[nodeGroup:cp]:
  forEach(event.response.nodes):
    cmd [${@i.id}]: sudo service nginx reload
    setNodeDisplayName [${@i.id}]: AppServer

onAfterScaleOut[nodeGroup:bl]:
  forEach(event.response.nodes):
    setNodeDisplayName [${@i.id}]: Load balancer

onInstall:
- log: Auto Scaling Triggers
- script: https://raw.githubusercontent.com/ProxiBlue/openmage-cluster/main/scripts/addTriggers.js
  params: 
    nodeGroup: cp
    resourceType: CPU
    scaleUpValue: 70
    scaleUpLimit: 10
    scaleUpLoadPeriod: 1
    scaleDownValue: 20
    scaleDownLimit: 2
    scaleDownLoadPeriod: 10
    cleanOldTriggers: true

- log: Set Display Name
  setNodeDisplayName [cp]: AppServer
  setNodeDisplayName [bl]: Load balancer
  setNodeDisplayName[${nodes.nosqldb.first.id}]: Session Storage
  setNodeDisplayName[${nodes.nosqldb.last.id}]: Cache Storage

- log: Load balancer Setup
- setupBL:
    filter: bl

- log: Envs Setup for CP layer
- setEnvs:
    filter: cp

- log: DB Cluster Setup
- installJps:
    jps: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master/scripts/ms-mm-configuration.jps
    settings:
      path: "https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master"
      db_user: "${globals.DB_USER}"
      db_pass: "${globals.DB_PASS}"
      scheme: "slave"
      custom_conf: "${globals.PATH}/configs/mysql/db.cnf"
    nodeGroup: sqldb

- log: Downloading, Unpacking, Installation and Patching OpenMage
- cmd[storage]:
  - mkdir -p /data/
  - chown 700:700 -Rh /data/
- forEach(i:nodes.cp):
    cmd[${this.filter}]:
    - yum -y install composer && composer self-update --1
- composerOpenMage
- cmd[storage]: wget ${globals.PATH}/configs/openmage/local.xml.template -O /data/app/etc/local.xml.template
- setupRDConnect:
    config: /data/app/etc/local.xml.template
- setupCP
- cmd[${nodes.cp.first.id}]:
    - wget ${globals.PATH}/configs/varnish/varnish-probe.php -O ${globals.MAGE_ROOT}/health_check.php
    - wget ${globals.PATH}/scripts/setupOpenMage.sh -O /tmp/setup.sh && bash -x /tmp/setup.sh
      ${globals.DB_USER} ${globals.DB_PASS} DB_MASTER ${globals.DB_NAME} ${globals.ADMIN_PASSWD}
      ${globals.MAGE_ROOT} ${env.url} ${user.email} ${globals.PATH} &>> /var/log/run.log

actions:
  composerOpenMage:
  - log: OpenMage Setup
  - cmd[${nodes.cp.first.id}]:
    - cd /tmp
    - curl -O ${globals.PATH}scripts/composerOpenMage.sh
    - bash -x /tmp/composerOpenMage.sh ${globals.PATH} ${globals.MAGE_ROOT} &>> /var/log/run.log

  setupCP:
  - log: App Servers Setup
  - cmd[cp]: |-
      wget ${globals.PATH}/configs/nginx/site-default-openmage.conf -O /etc/nginx/conf.d/site-default.conf
      wget ${globals.PATH}/configs/nginx/nginx.conf -O /etc/nginx/nginx.conf
      wget ${globals.PATH}/configs/php/extensions.ini -O /etc/php.d/extensions.ini
      sudo /etc/init.d/nginx restart &>> /var/log/run.log

  setEnvs:
  - forEach(i:nodes.sqldb):
    - if (${@i.ismaster}):
        cmd [${this.filter}]: 
          echo ${@i.intIP} DB_MASTER >> /etc/hosts
        user: root
    - if (!${@i.ismaster}):
        cmd [${this.filter}]: 
          echo ${@i.intIP} DB_SLAVE >> /etc/hosts
        user: root
  - cmd [${this.filter}]: 
      - echo ${nodes.nosqldb.first.intIP} RDS >> /etc/hosts
      - echo ${nodes.nosqldb.last.intIP} RDC >> /etc/hosts
    user: root

  setupBL:
  - cmd[bl]:
      - wget ${globals.PATH}/scripts/varnish/jem_overrides/varnish_balancer.lib -O /var/lib/jelastic/overrides/varnish_balancer.lib
      - wget ${globals.PATH}/configs/varnish/default.vcl -O /etc/varnish/default.vcl
    user: root
  - forEach(nodes.cp):
      cmd[${this.filter}]:
        - jem balancer addCommonHost -h ${@i.intIP}
        - sudo service varnish reload &>> /var/log/run.log
      user: root

  setupRDConnect:
    - setupRDconfig:
        id: ${nodes.nosqldb.first.id}
        passtype: RD_SESSION_PASS
        config: ${this.config}

    - setupRDconfig:
        id: ${nodes.nosqldb.last.id}
        passtype: RD_CACHE_PASS
        config: ${this.config}

  setupRDconfig:
    script: |
      var resp = jelastic.env.control.ExecCmdById(getParam('TARGET_APPID'), session, nodeid, toJSON([{ "command": "cat /etc/redis.conf | tail -1 | awk '{print $2}'"}]), false, "root");
      var passwd = resp.responses[0].out;
      resp = {result: 0, onAfterReturn: []};
      resp = jelastic.env.control.ExecCmdByGroup('${env.envName}', session, "storage", toJSON([{ "command": 'sed -ri \"s/${this.passtype}/' + passwd + '/g\" ${this.config}' }]), false, false, "root");
      return resp;
    nodeid: ${this.id}
